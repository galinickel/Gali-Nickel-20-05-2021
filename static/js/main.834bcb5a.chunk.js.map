{"version":3,"sources":["apis/weather.js","services/storage.service.js","store/actions/index.js","cmps/ListItem.js","cmps/List.js","cmps/GetUserLocation.js","cmps/SearchBar.js","cmps/WeatherDisplay.js","views/Weather.js","views/Favorites.js","cmps/Header.js","App.js","store/reducers/selectedCityReducer.js","store/reducers/favoritesReducer.js","store/reducers/index.js","store/reducers/cityListReducer.js","store/reducers/weatherReducer.js","store/reducers/unitReducer.js","store/reducers/modeReducer.js","index.js"],"names":["KEY","SEARCH_URL","WEATHER_URL","GEOLOCATION_URL","weatherAPI","query","getWeather","getCityFromGeolocation","term","a","axios","get","then","res","data","city","Key","lat","lng","storageService","getById","entityType","entityId","entities","find","entity","id","post","newEntity","_makeId","unshift","_save","remove","idx","findIndex","splice","saveToStorage","key","value","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","undefined","Promise","resolve","length","text","possible","i","charAt","Math","floor","random","toggleUnit","dispatch","type","toggleMode","setCurrCity","payload","ListItem","props","listType","isInFavorites","toggleFavoriteCity","className","onClick","onSelect","tabIndex","Country","ID","toLowerCase","LocalizedName","List","useDispatch","cityList","useSelector","state","favoriteCities","useState","favoritesToDisplay","setFavoritesToDisplay","useEffect","favorites","cityInFavorites","favoriteCity","toggleFavorite","renderContents","renderArr","map","GetUserLocation","dayMode","msg","setMsg","success","position","coords","latitude","longitude","console","log","code","error","err","navigator","geolocation","getCurrentPosition","SearchBar","setCity","display","setDisplay","wrapperRef","useRef","currCity","document","addEventListener","handleOutsideClick","removeEventListener","ev","wrap","current","contains","target","onSearchType","preventDefault","letter","nativeEvent","letterCode","charCodeAt","db","debouncedDispatch","ref","placeholder","onChange","style","transform","WeatherDisplay","icon","unit","weather","msgHeader","setMsgHeader","DailyForecasts","Day","Icon","Night","setTimeout","renderDegrees","dayNum","degrees","Temperature","Maximum","Value","Minimum","day","message","ShortPhrase","Date","substring","src","alt","href","Headline","Link","renderFiveDays","Weather","Favorites","history","useHistory","push","Header","to","App","hours","getHours","path","exact","component","defaultCity","action","combineReducers","favoritesReducer","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.834bcb5a.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst KEY = '?apikey=dWRWgogZNXfdk0HgKAeRAkpJ0nnMq5Yf'\r\nconst SEARCH_URL = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete`\r\nconst WEATHER_URL = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/`\r\nconst GEOLOCATION_URL = `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search`\r\n\r\nexport const weatherAPI = {\r\n    query,\r\n    getWeather,\r\n    getCityFromGeolocation\r\n}\r\n\r\nasync function query(term) {\r\n    return axios.get(SEARCH_URL + KEY + '&q=' + term + '&language=en-us').then(res=>{\r\n        return res.data\r\n    })\r\n}\r\n\r\nasync function getWeather(city) {\r\n    return axios.get(WEATHER_URL + city.Key + KEY + '&language=en-us&details=true&metric=true').then(res=>  {\r\n        return res.data\r\n    })\r\n}\r\n\r\nasync function getCityFromGeolocation(lat,lng){\r\n    return axios.get(GEOLOCATION_URL+  KEY + '&q='+lat+','+lng).then(res=>  {\r\n        return res.data.Key\r\n    })\r\n}","\nexport const storageService = {\n    query,\n    getById,\n    post,\n    remove,\n    saveToStorage,\n    loadFromStorage,\n}\n\nfunction query(entityType) {\n    var entities = JSON.parse(localStorage.getItem(entityType)) || []\n    return Promise.resolve(entities);\n}\n\nfunction getById(entityType, entityId) {\n    return query(entityType)\n        .then(entities => entities.find(entity => entity.id === entityId))\n}\n\nfunction post(entityType, newEntity) {\n    newEntity.id = _makeId()\n    return query(entityType)\n        .then(entities => {\n            entities.unshift(newEntity);\n            _save(entityType, entities)\n            return newEntity;\n        })\n}\n\nfunction remove(entityType, entityId) {\n    return query(entityType)\n        .then(entities => {\n            const idx = entities.findIndex(entity => entity.id === entityId);\n            entities.splice(idx, 1)\n            _save(entityType, entities)\n        })\n}\n\n\nfunction saveToStorage(key, value) {\n    localStorage.setItem(key, JSON.stringify(value) || null);\n}\n\nfunction loadFromStorage(key) {\n    let data = localStorage.getItem(key);\n    return (data) ? JSON.parse(data) : undefined;\n}\nfunction _save(entityType, entities) {\n    localStorage.setItem(entityType, JSON.stringify(entities))\n}\nfunction _makeId(length = 7) {\n    var text = '';\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}","import { weatherAPI } from '../../apis/weather';\r\nimport { storageService } from '../../services/storage.service'\r\n\r\nexport const toggleUnit = dispatch => {\r\n    dispatch({ type: 'TOGGLE_UNIT' })\r\n}\r\n\r\nexport const toggleMode = dispatch => {\r\n    dispatch({ type: 'TOGGLE_MODE' })\r\n}\r\n\r\nexport const searchCityFromLocation = (lat, lng) => async dispatch => {\r\n    console.log(lat,lng);\r\n    try {\r\n        const code = await weatherAPI.getCityFromGeolocation(lat, lng)\r\n        const res = await weatherAPI.getWeather(code);\r\n        dispatch({ type: 'GET_WEATHER', payload: res }); \r\n    }\r\n    catch (err) { console.log(err); }\r\n}\r\n\r\nexport const searchCity = term => async dispatch => {\r\n    try {\r\n        const res = await weatherAPI.query(term);\r\n        dispatch({ type: 'SEARCH_CITY', payload: res });\r\n    }\r\n    catch (err) { console.log(`Had an error getting to AccuWeather API.`) }\r\n\r\n}\r\n\r\nexport const setCurrCity = city => async dispatch => {\r\n    dispatch({ type: 'SET_CITY', payload: city });\r\n}\r\n\r\nexport const getWeather = code => async dispatch => {\r\n    try {\r\n        const res = await weatherAPI.getWeather(code);\r\n        dispatch({ type: 'GET_WEATHER', payload: res });\r\n    }\r\n    catch (err) { console.log(`Had an error getting to AccuWeather API.`) }\r\n}\r\n\r\nexport const getFavorites = () => async dispatch => {\r\n    const res = await storageService.query('favoriteCities')\r\n    return Promise.resolve(dispatch({ type: 'GET_FAVORITES', payload: res }))\r\n}\r\n\r\n\r\n\r\nexport const toggleFavorite = city => async dispatch => {\r\n    let res;\r\n    const favorites = await storageService.query('favoriteCities')\r\n    const cityInFavorites = favorites.find(favoriteCity => favoriteCity.LocalizedName === city.LocalizedName)\r\n    if (!cityInFavorites) res = await storageService.post('favoriteCities', city)\r\n    else res = await storageService.remove('favoriteCities', cityInFavorites.id)\r\n    dispatch({ type: 'SET_FAVORITES', payload: res })\r\n}","import { React } from 'react'\r\n\r\n\r\n\r\nconst ListItem = props => {\r\nconst {listType,city,isInFavorites,toggleFavoriteCity} = props\r\n    return(\r\n        <>\r\n  <div className={`item ui ${listType === 'favorites' ? 'card favorite-item five wide column' : 'search-result'} `}\r\n                    key={city.id}>\r\n                    <div\r\n                        className=\"header\"\r\n                        onClick={() => props.onSelect(city)}\r\n                        tabIndex=\"0\">\r\n                        {listType === 'fonselectavorites' ? <> <h3><i className={`${city.Country.ID.toLowerCase()} flag`}></i>{city.LocalizedName}</h3>\r\n                            <h5>See Forecast</h5></> : <>\r\n                            <p><i className={`${city.Country.ID.toLowerCase()} flag`}></i>{city.LocalizedName}</p></>}\r\n                    </div>\r\n                    {listType === 'favorites' && <div className=\"ui clearing divider\">\r\n                    </div>}\r\n\r\n                    <div\r\n                        className=\"description\"\r\n                        onClick={() => toggleFavoriteCity(city)}\r\n                    >\r\n                        <i className=\"plus circle icon\"></i>\r\n                        {isInFavorites ? 'Remove from Favorites' : 'Add to Favorites'}\r\n                    </div>\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListItem","import { React, useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleFavorite, getFavorites } from '../store/actions/index'\r\n\r\nimport ListItem from './ListItem'\r\n\r\nconst List = props => {\r\n    const dispatch = useDispatch()\r\n    const cityList = useSelector((state) => state.cityList)\r\n    const favoriteCities = useSelector((state)=>state.favoriteCities)\r\n    const [favoritesToDisplay, setFavoritesToDisplay] = useState([])\r\n    const { listType } = props\r\n\r\n    useEffect(() => {\r\n        dispatch(getFavorites()).then(res => {\r\n            setFavoritesToDisplay(res.payload)\r\n        })\r\n    }, [favoritesToDisplay.length])\r\n\r\n    const toggleFavoriteCity = city => {\r\n        dispatch(toggleFavorite(city))\r\n        setFavoritesToDisplay([])\r\n    }\r\n\r\n    const renderContents = renderArr => {\r\n        if (listType === 'searchOptions') if (cityList === [] || !cityList) return\r\n        return renderArr.map(city => {\r\n            const isInFavorites = favoritesToDisplay.find((favoriteCity) => favoriteCity.Key === city.Key)\r\n            return <ListItem\r\n            isInFavorites={isInFavorites}\r\n            city={city}\r\n            listType={listType}\r\n            toggleFavoriteCity={toggleFavoriteCity}\r\n            key={city.Key}\r\n            />       \r\n        })\r\n    }\r\n    return (<div className={listType === 'favorites' ? 'ui container' : null}>\r\n        <div className={listType === 'favorites' && favoritesToDisplay.length ? 'ui relaxed grid ' : 'ui divided list'}>\r\n            {listType === 'searchOptions'  && renderContents(cityList)}\r\n            {listType === 'favorites' && renderContents(favoritesToDisplay)}\r\n            {listType === 'favorites' && !favoritesToDisplay.length && <div className=\"favorites-empty-msg\"> <p>\r\n                It seems awfully empty in here! Why not search some cities, and add them to your favorites?</p></div>}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default List","\r\nimport { React, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { searchCityFromLocation } from '../store/actions/index'\r\n\r\n\r\nconst GetUserLocation = () => {\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    const [msg, setMsg] = useState('Click to check the forecast for your location!')\r\n    const dispatch = useDispatch()\r\n    const success = position => { \r\n        dispatch(searchCityFromLocation(position.coords.latitude, position.coords.longitude)) }\r\n    const error = err => {\r\n        console.log(err);\r\n        setMsg('Please allow this app to access your location.')\r\n    }\r\n    const getLocation = () => {\r\n        navigator.geolocation.getCurrentPosition(success, error)\r\n    }\r\n    return (\r\n        <div>\r\n            <button\r\n                className={dayMode ? 'ui button labeled icon' : 'ui button inverted basic labeled violet icon'}\r\n                onClick={getLocation}\r\n            >\r\n                <i className=\"location arrow icon\"></i>\r\n                    Search My Location\r\n            </button>\r\n            <p>{msg}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GetUserLocation\r\n\r\n","import { React, useState, useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setCurrCity, searchCity } from '../store/actions/index'\r\nimport List from '../cmps/List'\r\nimport db from 'just-debounce'\r\nimport GetUserLocation from '../cmps/GetUserLocation'\r\n\r\nconst SearchBar = () => {\r\n    const dispatch = useDispatch()\r\n    const [city, setCity] = useState('')\r\n    const [display, setDisplay] = useState(false)\r\n    const wrapperRef = useRef(null)\r\n    const currCity = useSelector((state) => state.city.LocalizedName)\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleOutsideClick)\r\n        // setCity(currCity)\r\n        return () => document.removeEventListener(\"mousedown\", handleOutsideClick)\r\n    }, [currCity])\r\n    \r\n\r\n    const handleOutsideClick = (ev) => {\r\n        const { current: wrap } = wrapperRef\r\n        if (wrap && !wrap.contains(ev.target)) setDisplay(false)\r\n    }\r\n\r\n    const onSearchType = async (ev) => {\r\n        ev.preventDefault()\r\n        const letter = ev.nativeEvent.data\r\n        if (letter) {\r\n            const letterCode = letter.charCodeAt(0)\r\n            if (!(letterCode >= 65 && letterCode <= 90) && !(letterCode >= 97 && letterCode <= 122)) return\r\n        }\r\n        setCity(ev.target.value)\r\n        if (!ev.target.value) return\r\n        const debouncedDispatch = db(() => dispatch(searchCity(city)), 850)\r\n        debouncedDispatch()\r\n\r\n    }\r\n    const onSelect = (city) => {\r\n        setCity(city.LocalizedName)\r\n        dispatch(setCurrCity(city))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div\r\n            ref={wrapperRef}>\r\n            <GetUserLocation/>\r\n            <h3> Search a City...</h3>\r\n\r\n            <input type=\"text\"\r\n                placeholder=\"Type to Search...\"\r\n                onChange={onSearchType}\r\n                value={city}\r\n                onClick={() => setDisplay(!display)}\r\n                className={dayMode ? null : 'night'}\r\n            />\r\n            <div\r\n                className=\"options-list\"\r\n                style={display ? { transform: 'scaleY(1)' } : { transform: 'scaleY(0)' }}>\r\n                <List onSelect={onSelect} listType={'searchOptions'} />\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import { React, useEffect, useState } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getWeather } from '../store/actions/index'\r\n\r\nconst WeatherDisplay = () => {\r\n    const dispatch = useDispatch();\r\n    const currCity = useSelector((state) => state.city);\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    const unit = useSelector((state) => state.unit);\r\n    const weather = useSelector((state) => state.weather);\r\n    const [msg, setMsg] = useState('Loading...')\r\n    const [msgHeader, setMsgHeader] = useState('Loading')\r\n\r\n    let icon;\r\n\r\n    useEffect(() => {\r\n        dispatch(getWeather(currCity))\r\n    }, [dispatch, currCity]);\r\n\r\n    (function () {\r\n        if (weather.DailyForecasts) { dayMode ? icon = weather.DailyForecasts[0].Day.Icon : icon = weather.DailyForecasts[0].Night.Icon }\r\n        else setTimeout(() => {\r\n            setMsg(`We're having some technical difficulties! Please try again later.`)\r\n            setMsgHeader('Error')\r\n        }, 2000);\r\n    })()\r\n\r\n    const renderImg = () => {\r\n        if (!icon) return\r\n        else if (icon < 10) return <img src={`https://developer.accuweather.com/sites/default/files/0${icon}-s.png`} alt=\"weather icon\" />\r\n        else return <img src={`https://developer.accuweather.com/sites/default/files/${icon}-s.png`} alt=\"weather icon\" />\r\n    }\r\n    const renderDegrees = (dayNum) => {\r\n        if (!icon) return\r\n        const degrees = dayMode ? weather.DailyForecasts[dayNum].Temperature.Maximum.Value : weather.DailyForecasts[dayNum].Temperature.Minimum.Value\r\n        return unit ? Math.floor(degrees) : Math.floor(degrees * 9 / 5 + 32)\r\n    }\r\n\r\n    const renderFiveDays = () => {\r\n        if (!icon) return\r\n        return weather.DailyForecasts.map((day, idx) => {\r\n            dayMode ? icon = weather.DailyForecasts[idx].Day.Icon : icon = weather.DailyForecasts[idx].Night.Icon\r\n            const message = dayMode ? weather.DailyForecasts[idx].Day.ShortPhrase : weather.DailyForecasts[idx].Night.ShortPhrase\r\n            return <div className=\" ui card\"\r\n                key={idx}>\r\n                <div className=\"content\">\r\n                    <h3 className=\"header\">\r\n                        {currCity.LocalizedName} <span>{day.Date.substring(5, 10)}</span>\r\n                    </h3>\r\n                    <p className=\"ui description\">\r\n                        {renderImg()}\r\n                        {renderDegrees(idx)} °\r\n                </p>\r\n                    <p>{message}</p>\r\n                    <a href={weather.Headline.Link}>See More</a>\r\n                </div>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {!weather.DailyForecasts &&\r\n                <div className=\"ui card\">\r\n                    <div className=\"content\">\r\n                        <h4 >{msgHeader}</h4>\r\n                        <p>{msg}</p>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n        {weather.DailyForecasts &&\r\n            <div>\r\n                {renderFiveDays()}</div>}\r\n\r\n    </>)\r\n}\r\n\r\nexport default WeatherDisplay","import React from 'react'\r\nimport SearchBar from '../cmps/SearchBar'\r\nimport WeatherDisplay from '../cmps/WeatherDisplay'\r\n\r\nconst Weather = () => {\r\n    return (\r\n        <div className=\"ui container \">\r\n            <SearchBar />\r\n            <WeatherDisplay/>\r\n        </div>\r\n    );\r\n}\r\nexport default Weather;","import { React } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport List from '../cmps/List'\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrCity } from '../store/actions/index'\r\n\r\n\r\nconst Favorites = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const onSelectCity = (city) => {\r\n        dispatch(setCurrCity(city))\r\n        history.push('/')\r\n    }\r\n    return (\r\n        <div className=\"favorites-page\">\r\n            <p>Below you'll find your favorites. Clicking a favorite city will show you it's weather forecast.</p>\r\n            <div className=\"ui horizontal divider\">\r\n                Your Favorites\r\n</div>\r\n            <List onSelect={onSelectCity} listType={'favorites'} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorites;","import { React } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { toggleUnit, toggleMode } from '../store/actions/index'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const unit = useSelector((state) => state.unit)\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n\r\n    const renderUnit = () => {\r\n        return unit ? 'C' : 'F'\r\n    }\r\n    const renderDayMode = () => {\r\n        return dayMode ? <><i className=\"sun icon\"></i>Day Mode</> : <><i className=\"moon icon\"></i>Night Mode</>\r\n    }\r\n    return (\r\n        <div className={dayMode ? 'ui secondary pointing menu' : 'ui secondary pointing menu night'}>\r\n            <Link to=\"/\" className=\"item\">\r\n                <h3>Weather</h3>\r\n            </Link>\r\n            <div className=\"right menu\">\r\n                <Link to=\"/favorites\" className=\"item\">\r\n                    <h3>Favorites</h3>\r\n                </Link>\r\n                <button\r\n                    className={dayMode ? 'ui button' : 'ui button inverted basic violet'}\r\n                    onClick={() => dispatch(toggleUnit)}>\r\n                    {renderUnit()}°\r\n                        </button>\r\n                <button\r\n                    className={dayMode ? 'ui labeled icon button' : 'ui button  labeled icon  inverted basic violet'}\r\n                    onClick={() => dispatch(toggleMode)}>\r\n                    {renderDayMode()}\r\n\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import {React, useEffect} from 'react'\r\nimport { HashRouter, Route } from 'react-router-dom'\r\nimport { useSelector,useDispatch } from 'react-redux'\r\nimport { toggleMode } from './store/actions/index'\r\n\r\nimport './style.css'\r\nimport './media-query.css'\r\nimport Weather from './views/Weather'\r\nimport Favorites from './views/Favorites'\r\nimport Header from './cmps/Header'\r\n\r\nconst App = () => {\r\n  const date = new Date()\r\n  const hours = date.getHours()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n      if (hours < 18 && hours < 5) dispatch(toggleMode)\r\n  }, [])\r\n  const dayMode = useSelector((state) => state.dayMode)\r\n  return (\r\n    <div className={dayMode ? 'background-day' : 'background-night'}>\r\n      <div className={dayMode ? 'ui  container main-app ' : 'ui  container main-app night'}>\r\n        <HashRouter >\r\n          <Header />\r\n          <div className=\"App ui container  app-main \">\r\n            <Route path=\"/favorites\" exact component={Favorites} />\r\n            <Route path=\"/\" exact component={Weather} />\r\n          </div>\r\n        </HashRouter >\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nconst defaultCity = {\r\n    \"Version\": 1,\r\n    \"Key\": \"215854\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Tel Aviv\",\r\n    \"Country\": {\r\n        \"ID\": \"IL\",\r\n        \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n        \"ID\": \"TA\",\r\n        \"LocalizedName\": \"Tel Aviv\"\r\n    },\r\n    \"id\": \"WM8brNU\"\r\n}\r\nexport default (state = defaultCity, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n\r\nexport default async (state = [], action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_FAVORITES':\r\n            return action.payload;\r\n        case 'GET_FAVORITES':\r\n            return  action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport cityListReduer from './cityListReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport selectedCityReducer from './selectedCityReducer'\r\nimport favoritesReducer from './favoritesReducer'\r\nimport unitReducer from './unitReducer'\r\nimport modeReducer from './modeReducer'\r\n\r\nexport default combineReducers(\r\n    {\r\n        cityList: cityListReduer,\r\n        weather: weatherReducer,\r\n        city: selectedCityReducer,\r\n        favoriteCities: favoritesReducer,\r\n        unit: unitReducer,\r\n        dayMode: modeReducer\r\n    }\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SEARCH_CITY':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'GET_WEATHER':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_UNIT':\r\n            return !state\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_MODE':\r\n            return !state\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './store/reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}