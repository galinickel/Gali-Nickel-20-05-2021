{"version":3,"sources":["apis/weather.js","services/storage.service.js","store/actions/index.js","cmps/ListItem.js","cmps/List.js","cmps/GetUserLocation.js","cmps/SearchBar.js","cmps/WeatherDisplay.js","views/Weather.js","views/Favorites.js","cmps/Header.js","App.js","store/reducers/selectedCityReducer.js","store/reducers/favoritesReducer.js","store/reducers/index.js","store/reducers/cityListReducer.js","store/reducers/weatherReducer.js","store/reducers/unitReducer.js","store/reducers/modeReducer.js","index.js"],"names":["KEY","SEARCH_URL","WEATHER_URL","GEOLOCATION_URL","weatherAPI","query","getWeather","getCityFromGeolocation","getWeatherFromKey","term","a","axios","get","then","res","data","city","Key","key","lat","lng","storageService","getById","entityType","entityId","entities","find","entity","id","post","newEntity","_makeId","unshift","_save","remove","idx","findIndex","splice","saveToStorage","value","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","undefined","Promise","resolve","length","text","possible","i","charAt","Math","floor","random","toggleUnit","dispatch","type","toggleMode","setCurrCity","payload","getFavorites","toggleFavorite","favorites","cityInFavorites","favoriteCity","LocalizedName","ListItem","props","listType","isInFavorites","toggleFavoriteCity","className","onClick","onSelect","tabIndex","Country","ID","toLowerCase","List","history","useHistory","useDispatch","cityList","useSelector","state","useState","favoritesToDisplay","setFavoritesToDisplay","useEffect","location","pathname","push","renderContents","renderArr","map","GetUserLocation","dayMode","msg","setMsg","success","position","coords","latitude","longitude","console","log","error","err","navigator","geolocation","getCurrentPosition","SearchBar","setCity","display","setDisplay","wrapperRef","useRef","currCity","document","addEventListener","handleOutsideClick","removeEventListener","ev","wrap","current","contains","target","onSearchType","preventDefault","letter","nativeEvent","letterCode","charCodeAt","db","debouncedDispatch","ref","placeholder","onChange","style","transform","WeatherDisplay","icon","unit","weather","msgHeader","setMsgHeader","code","DailyForecasts","Day","Icon","Night","setTimeout","renderDegrees","dayNum","degrees","Temperature","Maximum","Value","Minimum","day","message","ShortPhrase","Date","substring","src","alt","href","Headline","Link","renderFiveDays","Weather","Favorites","Header","to","App","hours","getHours","path","exact","component","defaultCity","action","combineReducers","favoriteCities","favoritesReducer","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.e569d1f6.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst KEY = '?apikey=dWRWgogZNXfdk0HgKAeRAkpJ0nnMq5Yf'\r\nconst SEARCH_URL = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete`\r\nconst WEATHER_URL = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/`\r\nconst GEOLOCATION_URL = `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search`\r\n\r\nexport const weatherAPI = {\r\n    query,\r\n    getWeather,\r\n    getCityFromGeolocation,\r\n    getWeatherFromKey\r\n}\r\n\r\nasync function query(term) {\r\n    return axios.get(SEARCH_URL + KEY + '&q=' + term + '&language=en-us').then(res=>{\r\n        return res.data\r\n    })\r\n}\r\n\r\nasync function getWeather(city) {\r\n    return axios.get(WEATHER_URL + city.Key + KEY + '&language=en-us&details=true&metric=true').then(res=>  {\r\n        return res.data\r\n    })\r\n}\r\n\r\nasync function getWeatherFromKey(key) {\r\n    return axios.get(WEATHER_URL + key + KEY + '&language=en-us&details=true&metric=true').then(res=>  {\r\n        return res.data\r\n    })\r\n}\r\n\r\nasync function getCityFromGeolocation(lat,lng){\r\n    return axios.get(GEOLOCATION_URL+  KEY + '&q='+lat+','+lng).then(res=>  {\r\n        return res.data\r\n    })\r\n}","\r\nexport const storageService = {\r\n    query,\r\n    getById,\r\n    post,\r\n    remove,\r\n    saveToStorage,\r\n    loadFromStorage,\r\n}\r\n\r\nfunction query(entityType) {\r\n    var entities = JSON.parse(localStorage.getItem(entityType)) || []\r\n    return Promise.resolve(entities);\r\n}\r\n\r\nfunction getById(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => entities.find(entity => entity.id === entityId))\r\n}\r\n\r\nfunction post(entityType, newEntity) {\r\n    newEntity.id = _makeId()\r\n    return query(entityType)\r\n        .then(entities => {\r\n            entities.unshift(newEntity);\r\n            _save(entityType, entities)\r\n            return newEntity;\r\n        })\r\n}\r\n\r\nfunction remove(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity.id === entityId);\r\n            entities.splice(idx, 1)\r\n            _save(entityType, entities)\r\n        })\r\n}\r\n\r\n\r\nfunction saveToStorage(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value) || null);\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    let data = localStorage.getItem(key);\r\n    return (data) ? JSON.parse(data) : undefined;\r\n}\r\nfunction _save(entityType, entities) {\r\n    localStorage.setItem(entityType, JSON.stringify(entities))\r\n}\r\nfunction _makeId(length = 7) {\r\n    var text = '';\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}","import { weatherAPI } from '../../apis/weather';\r\nimport { storageService } from '../../services/storage.service'\r\n\r\nexport const toggleUnit = dispatch => {\r\n    dispatch({ type: 'TOGGLE_UNIT' })\r\n}\r\n\r\nexport const toggleMode = dispatch => {\r\n    dispatch({ type: 'TOGGLE_MODE' })\r\n}\r\n\r\nexport const searchCityFromLocation = (lat, lng) => async dispatch => {\r\n    try {\r\n        const city = await weatherAPI.getCityFromGeolocation(lat, lng)\r\n        const res = await weatherAPI.getWeather(city);\r\n        dispatch({ type: 'GET_WEATHER', payload: res }); \r\n        dispatch({ type: 'SET_CITY', payload: city });\r\n\r\n    }\r\n    catch (err) { console.log(err); }\r\n}\r\n\r\nexport const searchCity = term => async dispatch => {\r\n    try {\r\n        const res = await weatherAPI.query(term);\r\n        dispatch({ type: 'SEARCH_CITY', payload: res });\r\n    }\r\n    catch (err) { console.log(`Had an error getting to AccuWeather API.`) }\r\n\r\n}\r\n\r\nexport const setCurrCity = city => async dispatch => {\r\n    dispatch({ type: 'SET_CITY', payload: city });\r\n}\r\n\r\nexport const getWeather = code => async dispatch => {\r\n    try {\r\n        const res = await weatherAPI.getWeather(code);\r\n        dispatch({ type: 'GET_WEATHER', payload: res });\r\n    }\r\n    catch (err) { console.log(`Had an error getting to AccuWeather API.`) }\r\n}\r\n\r\nexport const getFavorites = () => async dispatch => {\r\n    const res = await storageService.query('favoriteCities')\r\n    return Promise.resolve(dispatch({ type: 'GET_FAVORITES', payload: res }))\r\n}\r\n\r\n\r\n\r\nexport const toggleFavorite = city => async dispatch => {\r\n    let res;\r\n    const favorites = await storageService.query('favoriteCities')\r\n    const cityInFavorites = favorites.find(favoriteCity => favoriteCity.LocalizedName === city.LocalizedName)\r\n    if (!cityInFavorites) res = await storageService.post('favoriteCities', city)\r\n    else res = await storageService.remove('favoriteCities', cityInFavorites.id)\r\n    dispatch({ type: 'SET_FAVORITES', payload: res })\r\n}","import { React } from 'react'\r\n\r\n\r\n\r\nconst ListItem = props => {\r\n    const { listType, city, isInFavorites, toggleFavoriteCity } = props\r\n    return (\r\n        <>\r\n            <div className={`item ui ${listType === 'favorites' ? 'card favorite-item five wide column' : 'search-result'} `}\r\n                key={city.id}>\r\n                <div\r\n                    className=\"header\"\r\n                    onClick={() => props.onSelect(city)}\r\n                    tabIndex=\"0\">\r\n                    {listType === 'fonselectavorites' ? <> <h3><i className={`${city.Country.ID.toLowerCase()} flag`}></i>{city.LocalizedName}</h3>\r\n                        <h5>See Forecast</h5></> : <>\r\n                        <p><i className={`${city.Country.ID.toLowerCase()} flag`}></i>{city.LocalizedName}</p></>}\r\n                </div>\r\n                {listType === 'favorites' && <div className=\"ui clearing divider\">\r\n                </div>}\r\n                <div\r\n                    className=\"description\"\r\n                    onClick={() => toggleFavoriteCity(city)}\r\n                >\r\n                    <i className=\"plus circle icon\"></i>\r\n                    {isInFavorites ? 'Remove from Favorites' : 'Add to Favorites'}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListItem","import { React, useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleFavorite, getFavorites } from '../store/actions/index'\r\nimport { setCurrCity } from '../store/actions/index'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport ListItem from './ListItem'\r\n\r\nconst List = props => {\r\n    const history = useHistory()\r\n\r\n    const dispatch = useDispatch()\r\n    const cityList = useSelector((state) => state.cityList)\r\n    const [favoritesToDisplay, setFavoritesToDisplay] = useState([])\r\n    const { listType } = props\r\n\r\n    useEffect(() => {\r\n        dispatch(getFavorites()).then(res=>{\r\n            setFavoritesToDisplay(res.payload)\r\n        })\r\n    }, [])\r\n\r\n    const toggleFavoriteCity = async (city) => {\r\n        await dispatch(toggleFavorite(city))\r\n        const res = await dispatch(getFavorites())\r\n        setFavoritesToDisplay(res.payload)\r\n    }\r\n\r\n    const onSelect = (city) => {\r\n        dispatch(setCurrCity(city))\r\n        if(history.location.pathname !== \"/\")history.push('/')\r\n    }\r\n\r\n    const renderContents = renderArr => {\r\n        if (listType === 'searchOptions') if (cityList === [] || !cityList) return\r\n        return renderArr.map(city => {\r\n            const isInFavorites = favoritesToDisplay.find((favoriteCity) => favoriteCity.Key === city.Key)\r\n            return <ListItem\r\n                isInFavorites={isInFavorites}\r\n                city={city}\r\n                listType={listType}\r\n                toggleFavoriteCity={toggleFavoriteCity}\r\n                key={city.Key}\r\n                onSelect={onSelect}\r\n            />\r\n        })\r\n    }\r\n    return (<div className={listType === 'favorites' ? 'ui container' : null}>\r\n        <div className={listType === 'favorites' && favoritesToDisplay.length ? 'ui relaxed grid ' : 'ui divided list'}>\r\n            {listType === 'searchOptions' && renderContents(cityList)}\r\n            {listType === 'favorites' && renderContents(favoritesToDisplay)}\r\n            {listType === 'favorites' && !favoritesToDisplay.length && <div className=\"favorites-empty-msg\"> <p>\r\n                It seems awfully empty in here! Why not search some cities, and add them to your favorites?</p></div>}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default List","\r\nimport { React, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { searchCityFromLocation } from '../store/actions/index'\r\n\r\n\r\nconst GetUserLocation = () => {\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    const [msg, setMsg] = useState('Click to check the forecast for your location!')\r\n    const dispatch = useDispatch()\r\n    const success = position => { \r\n        dispatch(searchCityFromLocation(position.coords.latitude, position.coords.longitude)) }\r\n    const error = err => {\r\n        console.log(err);\r\n        setMsg('Please allow this app to access your location.')\r\n    }\r\n    const getLocation = () => {\r\n        navigator.geolocation.getCurrentPosition(success, error)\r\n    }\r\n    return (\r\n        <div>\r\n            <button\r\n                className={dayMode ? 'ui button labeled icon' : 'ui button inverted basic labeled violet icon'}\r\n                onClick={getLocation}\r\n            >\r\n                <i className=\"location arrow icon\"></i>\r\n                    Search My Location\r\n            </button>\r\n            <p>{msg}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GetUserLocation\r\n\r\n","import { React, useState, useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setCurrCity, searchCity } from '../store/actions/index'\r\nimport List from '../cmps/List'\r\nimport db from 'just-debounce'\r\nimport GetUserLocation from '../cmps/GetUserLocation'\r\n\r\nconst SearchBar = () => {\r\n    const dispatch = useDispatch()\r\n    const [city, setCity] = useState('')\r\n    const [display, setDisplay] = useState(false)\r\n    const wrapperRef = useRef(null)\r\n    const currCity = useSelector((state) => state.city.LocalizedName)\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleOutsideClick)\r\n        // setCity(currCity)\r\n        return () => document.removeEventListener(\"mousedown\", handleOutsideClick)\r\n    }, [currCity])\r\n    \r\n\r\n    const handleOutsideClick = (ev) => {\r\n        const { current: wrap } = wrapperRef\r\n        if (wrap && !wrap.contains(ev.target)) setDisplay(false)\r\n    }\r\n\r\n    const onSearchType = async (ev) => {\r\n        ev.preventDefault()\r\n        const letter = ev.nativeEvent.data\r\n        if (letter) {\r\n            const letterCode = letter.charCodeAt(0)\r\n            if (!(letterCode >= 65 && letterCode <= 90) && !(letterCode >= 97 && letterCode <= 122)) return\r\n        }\r\n        setCity(ev.target.value)\r\n        if (!ev.target.value) return\r\n        const debouncedDispatch = db(() => dispatch(searchCity(city)), 850)\r\n        debouncedDispatch()\r\n\r\n    }\r\n    const onSelect = (city) => {\r\n        setCity(city.LocalizedName)\r\n        dispatch(setCurrCity(city))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div\r\n            ref={wrapperRef}>\r\n            <GetUserLocation/>\r\n            <h3> Search a City...</h3>\r\n\r\n            <input type=\"text\"\r\n                placeholder=\"Type to Search...\"\r\n                onChange={onSearchType}\r\n                value={city}\r\n                onClick={() => setDisplay(!display)}\r\n                className={dayMode ? null : 'night'}\r\n            />\r\n            <div\r\n                className=\"options-list\"\r\n                style={display ? { transform: 'scaleY(1)' } : { transform: 'scaleY(0)' }}>\r\n                <List onSelect={onSelect} listType={'searchOptions'} />\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import { React, useEffect, useState } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getWeather } from '../store/actions/index'\r\n\r\nconst WeatherDisplay = () => {\r\n    const dispatch = useDispatch();\r\n    const currCity = useSelector((state) => state.city);\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n    const unit = useSelector((state) => state.unit);\r\n    const weather = useSelector((state) => state.weather);\r\n    const [msg, setMsg] = useState('Loading...')\r\n    const [msgHeader, setMsgHeader] = useState('Loading')\r\n\r\n    let icon;\r\n\r\n    useEffect(() => {\r\n        dispatch(getWeather(currCity))\r\n    }, [dispatch, currCity]);\r\n\r\n    (function () {\r\n        if (weather.DailyForecasts) { dayMode ? icon = weather.DailyForecasts[0].Day.Icon : icon = weather.DailyForecasts[0].Night.Icon }\r\n        else setTimeout(() => {\r\n            setMsg(`We're having some technical difficulties! Please try again later.`)\r\n            setMsgHeader('Error')\r\n        }, 2000);\r\n    })()\r\n\r\n    const renderImg = () => {\r\n        if (!icon) return\r\n        else if (icon < 10) return <img src={`https://developer.accuweather.com/sites/default/files/0${icon}-s.png`} alt=\"weather icon\" />\r\n        else return <img src={`https://developer.accuweather.com/sites/default/files/${icon}-s.png`} alt=\"weather icon\" />\r\n    }\r\n    const renderDegrees = (dayNum) => {\r\n        if (!icon) return\r\n        const degrees = dayMode ? weather.DailyForecasts[dayNum].Temperature.Maximum.Value : weather.DailyForecasts[dayNum].Temperature.Minimum.Value\r\n        return unit ? Math.floor(degrees) : Math.floor(degrees * 9 / 5 + 32)\r\n    }\r\n\r\n    const renderFiveDays = () => {\r\n        if (!icon) return\r\n        return weather.DailyForecasts.map((day, idx) => {\r\n            dayMode ? icon = weather.DailyForecasts[idx].Day.Icon : icon = weather.DailyForecasts[idx].Night.Icon\r\n            const message = dayMode ? weather.DailyForecasts[idx].Day.ShortPhrase : weather.DailyForecasts[idx].Night.ShortPhrase\r\n            return <div className={dayMode? 'ui card' : 'ui card night'}\r\n                key={idx}>\r\n                <div className=\"content\">\r\n                    <h3 className=\"header\">\r\n                        {currCity.LocalizedName} <span>{day.Date.substring(5, 10)}</span>\r\n                    </h3>\r\n                    <p className=\"ui description\">\r\n                        {renderImg()}\r\n                        {renderDegrees(idx)} °\r\n                </p>\r\n                    <p>{message}</p>\r\n                    <a href={weather.Headline.Link}>See More</a>\r\n                </div>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {!weather.DailyForecasts &&\r\n                <div className=\"ui card\">\r\n                    <div className=\"content\">\r\n                        <h4 >{msgHeader}</h4>\r\n                        <p>{msg}</p>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n        {weather.DailyForecasts &&\r\n            <div>\r\n                {renderFiveDays()}</div>}\r\n\r\n    </>)\r\n}\r\n\r\nexport default WeatherDisplay","import React from 'react'\r\nimport SearchBar from '../cmps/SearchBar'\r\nimport WeatherDisplay from '../cmps/WeatherDisplay'\r\n\r\nconst Weather = () => {\r\n    return (\r\n        <div className=\"ui container \">\r\n            <SearchBar />\r\n            <WeatherDisplay/>\r\n        </div>\r\n    );\r\n}\r\nexport default Weather;","import { React } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport List from '../cmps/List'\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrCity } from '../store/actions/index'\r\n\r\n\r\nconst Favorites = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const onSelectCity = (city) => {\r\n        dispatch(setCurrCity(city))\r\n        history.push('/')\r\n    }\r\n    return (\r\n        <div className=\"favorites-page\">\r\n            <p>Below you'll find your favorites. Clicking a favorite city will show you it's weather forecast.</p>\r\n            <div className=\"ui horizontal divider\">\r\n                Your Favorites\r\n</div>\r\n            <List onSelect={onSelectCity} listType={'favorites'} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorites;","import { React } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { toggleUnit, toggleMode } from '../store/actions/index'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const unit = useSelector((state) => state.unit)\r\n    const dayMode = useSelector((state) => state.dayMode)\r\n\r\n    const renderUnit = () => {\r\n        return unit ? 'C' : 'F'\r\n    }\r\n    const renderDayMode = () => {\r\n        return dayMode ? <><i className=\"sun icon\"></i>Day Mode</> : <><i className=\"moon icon\"></i>Night Mode</>\r\n    }\r\n    return (\r\n        <div className={dayMode ? 'ui secondary pointing menu' : 'ui secondary pointing menu night'}>\r\n            <Link to=\"/\" className=\"item\">\r\n                <h3>Weather</h3>\r\n            </Link>\r\n            <div className=\"right menu\">\r\n                <Link to=\"/favorites\" className=\"item\">\r\n                    <h3>Favorites</h3>\r\n                </Link>\r\n                <button\r\n                    className={dayMode ? 'ui button' : 'ui button inverted basic violet'}\r\n                    onClick={() => dispatch(toggleUnit)}>\r\n                    {renderUnit()}°\r\n                        </button>\r\n                <button\r\n                    className={dayMode ? 'ui labeled icon button' : 'ui button  labeled icon  inverted basic violet'}\r\n                    onClick={() => dispatch(toggleMode)}>\r\n                    {renderDayMode()}\r\n\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import {React, useEffect} from 'react'\r\nimport { HashRouter, Route } from 'react-router-dom'\r\nimport { useSelector,useDispatch } from 'react-redux'\r\nimport { toggleMode } from './store/actions/index'\r\n\r\nimport './style.css'\r\nimport './media-query.css'\r\nimport Weather from './views/Weather'\r\nimport Favorites from './views/Favorites'\r\nimport Header from './cmps/Header'\r\n\r\nconst App = () => {\r\n  const date = new Date()\r\n  const hours = date.getHours()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n      if (hours < 18 && hours < 5) dispatch(toggleMode)\r\n  }, [])\r\n  const dayMode = useSelector((state) => state.dayMode)\r\n  return (\r\n    <div className={dayMode ? 'background-day' : 'background-night'}>\r\n      <div className={dayMode ? 'ui  container main-app ' : 'ui  container main-app night'}>\r\n        <HashRouter >\r\n          <Header />\r\n          <div className=\"App ui container  app-main \">\r\n            <Route path=\"/favorites\" exact component={Favorites} />\r\n            <Route path=\"/\" exact component={Weather} />\r\n          </div>\r\n        </HashRouter >\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nconst defaultCity = {\r\n    \"Version\": 1,\r\n    \"Key\": \"215854\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Tel Aviv\",\r\n    \"Country\": {\r\n        \"ID\": \"IL\",\r\n        \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n        \"ID\": \"TA\",\r\n        \"LocalizedName\": \"Tel Aviv\"\r\n    },\r\n    \"id\": \"WM8brNU\"\r\n}\r\nexport default (state = defaultCity, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n\r\nexport default async (state = [], action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_FAVORITES':\r\n            return action.payload;\r\n        case 'GET_FAVORITES':\r\n            return  action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport cityListReduer from './cityListReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport selectedCityReducer from './selectedCityReducer'\r\nimport favoritesReducer from './favoritesReducer'\r\nimport unitReducer from './unitReducer'\r\nimport modeReducer from './modeReducer'\r\n\r\nexport default combineReducers(\r\n    {\r\n        cityList: cityListReduer,\r\n        weather: weatherReducer,\r\n        city: selectedCityReducer,\r\n        favoriteCities: favoritesReducer,\r\n        unit: unitReducer,\r\n        dayMode: modeReducer\r\n    }\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SEARCH_CITY':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'GET_WEATHER':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_UNIT':\r\n            return !state\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_MODE':\r\n            return !state\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './store/reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}